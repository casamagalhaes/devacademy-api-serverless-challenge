AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Node Service Deployment
Parameters:
  AppName:
    Type: String
    Default: Sample
    Description: Informe o nome da sua stack
Resources:
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    DependsOn: 
     - LambdaApiProducts
     - LambdaApiClients
    Properties:
      ApiKeySourceType: HEADER
      Description: Api Gateway
      EndpointConfiguration:
        Types:
          - EDGE
      Name: !Join ["-", ["WKS", !Ref "AppName", "API"]]
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodPOST:
    Type: AWS::ApiGateway::Method
    DependsOn: 
     - LambdaApiProducts
     - LambdaApiClients
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApiProducts.Arn},${LambdaApiClients.Arn}/invocations"
      OperationName: "lambda"
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodGET:
    Type: AWS::ApiGateway::Method
    DependsOn: 
     - LambdaApiProducts
     - LambdaApiClients
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApiProducts.Arn},${LambdaApiClients.Arn}/invocations"
      OperationName: "lambda"
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi    
  ApiGatewayMethodPUT:
    Type: AWS::ApiGateway::Method
    DependsOn: 
     - LambdaApiProducts
     - LambdaApiClients
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApiProducts.Arn},${LambdaApiClients.Arn}/invocations"
      OperationName: "lambda"
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi 
  ApiGatewayMethodDELETE:
    Type: AWS::ApiGateway::Method
    DependsOn: 
     - LambdaApiProducts
     - LambdaApiClients
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaApiProducts.Arn},${LambdaApiClients.Arn}/invocations"
      OperationName: "lambda"
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi 
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v1
      RestApiId: !Ref ApiGatewayRestApi
      StageName: "Chalenge"
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiGatewayMethodPOST
      - ApiGatewayMethodGET
      - ApiGatewayMethodPUT
      - ApiGatewayMethodDELETE
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:*"
                Resource: "*"
  LambdaApiProducts:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      FunctionName: !Join ["-", ["WKS", !Ref "AppName", "Products"]]
      Runtime: nodejs12.x
      AutoPublishAlias: live
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          NODE_ENV: "production"
          PRODUCTS_TABLE: !Ref "ProductsDynamoDBTable"
      DeploymentPreference:
        Type: AllAtOnce
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: logs:CreateLogGroup
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
            - Effect: Allow
              Action:
                - ec2:DescribeVpcs
                - ec2:DescribeRegions
                - ec2:DescribeInstances
                - ec2:CreateNetworkInterface
                - ec2:DeleteNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DetachNetworkInterface
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:BatchGet*
                - dynamodb:DescribeStream
                - dynamodb:DescribeTable
                - dynamodb:Get*
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:BatchWrite*
                - dynamodb:CreateTable
                - dynamodb:Delete*
                - dynamodb:Update*
                - dynamodb:PutItem
              Resource: "*"
  LambdaApiClients:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      FunctionName: !Join ["-", ["WKS", !Ref "AppName", "Clients"]]
      Runtime: nodejs12.x
      AutoPublishAlias: live
      MemorySize: 256
      Timeout: 30
      Environment:
        Variables:
          NODE_ENV: "production"
          CLIENTS_TABLE: !Ref "ClientsDynamoDBTable"
      DeploymentPreference:
        Type: AllAtOnce
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: logs:CreateLogGroup
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"
            - Effect: Allow
              Action:
                - ec2:DescribeVpcs
                - ec2:DescribeRegions
                - ec2:DescribeInstances
                - ec2:CreateNetworkInterface
                - ec2:DeleteNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DetachNetworkInterface
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:BatchGet*
                - dynamodb:DescribeStream
                - dynamodb:DescribeTable
                - dynamodb:Get*
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:BatchWrite*
                - dynamodb:CreateTable
                - dynamodb:Delete*
                - dynamodb:Update*
                - dynamodb:PutItem
              Resource: "*"
  ProductsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["-", ["WKS", !Ref "AppName", "Products"]]
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  ClientsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Join ["-", ["WKS", !Ref "AppName", "Clients"]]
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  ApiLambdaPermissionProducts:
    Type: AWS::Lambda::Permission
    DependsOn:
      - LambdaApiProducts
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaApiProducts
      Principal: apigateway.amazonaws.com
  ApiLambdaPermissionClients:
    Type: AWS::Lambda::Permission
    DependsOn:
      - LambdaApiClients
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaApiClients
      Principal: apigateway.amazonaws.com

 